"""–¢—É—Ç –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ä–æ—Ñ–ª—è–Ω —Ö–µ–Ω–¥–ª–µ—Ä—ã.
–ù–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∏—Ö —Å–µ—Ä—å–µ–∑–Ω–æ. –ù–æ
—Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª–µ–∑–Ω—ã–µ, –¥–∞–∂–µ –æ—á–µ–Ω—å"""
import datetime
import random
import re
from random import randint

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command

from data.permissions import set_user_ro_permissions
from loader import db
from utils.misc import rate_limit
from utils.misc.random_num_generator import generate_num


@rate_limit(120, "gay")
async def gay(message: types.Message):
    """Handler for the /gay command.
    In a humorous and respectful manner, the bot sends a random percentage reflecting a playful take on the user's alignment with a random LGBTQ+ orientation.

    Examples:
        /gay
        /gay Sam
    """
    # Reference the original message's author if it's a reply; otherwise, the command user.
    target = message.reply_to_message.from_user.get_mention(
        as_html=True) if message.reply_to_message else message.from_user.get_mention(
        as_html=True)

    percentage = randint(0, 100)

    # these are a little cringy but doesn't matter
    phrases = [
        "üåà –í–∏–≥–ª—è–¥–∞—î, —â–æ —Å—å–æ–≥–æ–¥–Ω—ñ {username} –Ω–∞ {percentage}% –≥–µ–π ‚Äî –∂–∞—Ä—Ç—É—î–º–æ –∑ –ª—é–±–æ–≤'—é!",
        "üåà –°—å–æ–≥–æ–¥–Ω—ñ {username} –º–æ–∂–µ –±—É—Ç–∏ {percentage}% –ª–µ—Å–±—ñ–π–∫–∞, —Å–≤—è—Ç–∫—É—î–º–æ —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å!",
        "üåà {username} –≤–∏–≥–ª—è–¥–∞—î –Ω–∞ {percentage}% –±—ñ—Å–µ–∫—Å—É–∞–ª —Å—å–æ–≥–æ–¥–Ω—ñ, —è–∫—ñ –ø—Ä–∏–≥–æ–¥–∏ —á–µ–∫–∞—é—Ç—å?",
        "üåà –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥—É—Ö {username} - {percentage}% —Ç—Ä–∞–Ω—Å–≥–µ–Ω–¥–µ—Ä, –≤—ñ—Ç–∞—î–º–æ —É—Å—ñ –∫–æ–ª—å–æ—Ä–∏ –≤–µ—Å–µ–ª–∫–∏!",
        "üåà –ó–∞ —à–∫–∞–ª–æ—é –∫–≤—ñ—Ä-–µ–Ω–µ—Ä–≥—ñ—ó {username} –Ω–∞ {percentage}%, —è—Å–∫—Ä–∞–≤–æ —ñ –≥–æ—Ä–¥–æ!",
        "üåà –ß–∏ –∑–Ω–∞—î—Ç–µ –≤–∏, —â–æ {username} —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞ {percentage}% –∞—Å–µ–∫—Å—É–∞–ª? –†–æ–∑–∫—Ä–∏–≤–∞—î–º–æ —Ç–∞—î–º–Ω–∏—Ü—ñ!",
        "üåà –ü–∞–Ω—Å–µ–∫—Å—É–∞–ª—å–Ω—ñ –≤—ñ–±—Ä–∞—Ü—ñ—ó {username} —Å—è–≥–∞—é—Ç—å {percentage}% —Å—å–æ–≥–æ–¥–Ω—ñ, —Ö–∞–π –±—É–¥–µ –≤–µ—Å–µ–ª–æ!",
        "üåà {username} —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏–ø—Ä–æ–º—ñ–Ω—é—î –Ω–µ–±—ñ–Ω–∞—Ä–Ω—É –µ–Ω–µ—Ä–≥—ñ—é –Ω–∞ {percentage}%, —É–Ω—ñ–∫–∞–ª—å–Ω–æ —ñ —Å—Ç–∏–ª—å–Ω–æ!",
        "üåà –ì–µ–π-—Ä–∞–¥–∞—Ä –ø–æ–∫–∞–∑—É—î, —â–æ {username} –Ω–∞ {percentage}% –≥–µ–π —Å—å–æ–≥–æ–¥–Ω—ñ, —á–∞—Å –¥–ª—è —Ä–∞–π–¥—É–∂–Ω–∏—Ö —Å–≤—è—Ç–∫—É–≤–∞–Ω—å!",
        "üåà –ú–∞–≥—ñ—á–Ω–∏–π –∫–≤—ñ—Ä-–∫—É–±–∏–∫ –≤–∏—Ä—ñ—à–∏–≤, —â–æ {username} —Å—å–æ–≥–æ–¥–Ω—ñ {percentage}% –ª–µ—Å–±—ñ–π–∫–∞, –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ —Ç–∞ —è—Å–∫—Ä–∞–≤–æ!"
    ]

    # Send the result with a random orientation
    await message.reply(random.choice(phrases).format(username=target, percentage=percentage))



def determine_gender(name):
    # Lists of explicit names
    man_names = ['–ú—ñ—à–∞', 'Bodya']
    woman_names = ['–ù–∞—Å—Ç–µ–Ω—å–∫–∞']

    # Women name endings
    women_name_endings = '|'.join([
        'sa', '—Å–∞', 'ta', '—Ç–∞', '—à–∞', 'sha', '–Ω–∞', 'na', '–∏—è', 'ia',  # existing
        'va', '–≤–∞', 'ya', '—è', 'ina', '–∏–Ω–∞', 'ka', '–∫–∞', 'la', '–ª–∞',  # Slavic languages
        'ra', '—Ä–∞', 'sia', '—Å–∏—è', 'ga', '–≥–∞', 'da', '–¥–∞', 'nia', '–Ω–∏—è', # Slavic languages
        'lie', 'ly', 'lee', 'ley', 'la', 'le', 'ette', 'elle', 'anne'  # English language
    ])

    # Check explicit list and name suffixes
    if name in woman_names or re.search(f'\w*({women_name_endings})(\W|$)', name, re.IGNORECASE):
        return 'woman'
    else:
        return 'man'

def select_emoji(length, is_biba):
    # Emojis for bibas, from smallest to largest
    biba_emojis = ['ü•í', 'üçå', 'üåΩ', 'ü•ñ', 'üåµ', 'üå¥']

    # Emojis for breasts, from smallest to largest
    breast_emojis = ['üçì', 'üçä', 'üçé', 'ü•≠', 'üçâ', 'üéÉ']

    # Select the appropriate list of emojis
    emojis = biba_emojis if is_biba else breast_emojis

    # Select an emoji based on length
    for size, emoji in zip((1, 5, 10, 15, 20, 25), emojis):
        if length <= size:
            return emoji

    # If none of the sizes matched, return the largest emoji
    return emojis[-1]


@rate_limit(60, "fun")
async def biba(message: types.Message):
    """–•–µ–¥–ª–µ—Ä, –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–∞–Ω–¥—ã /biba –∏–ª–∏ !biba

    –í –æ—Ç–≤–µ—Ç, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –±–∏–±—ã

    –ü—Ä–∏–º–µ—Ä—ã:
        /biba
        /biba 10
        /biba 1-10
        /biba 10-1
        !biba
        !biba 10
        !biba 1-10
        !biba 10-1
    """
    # —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    command_parse = re.compile(r"(!biba|/biba) ?(-?\d*)?-?(\d+)?")
    parsed = command_parse.match(message.text)
    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –±–∏–±—ã –æ—Ç 1 –¥–æ 30 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã)
    length = generate_num(parsed.group(2), parsed.group(3), 1, 30)

    # –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±—É–¥–µ–º –±–µ—Ä—è—Ç—å –±–∏–±—É –∞–≤—Ç–æ—Ä–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –±–∏–±—É —Ç–æ–≥–æ, –∫—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–º–∞–Ω–¥—É
    if message.reply_to_message:
        target = message.reply_to_message.from_user.get_mention(as_html=True)
    else:
        target = message.from_user.get_mention(as_html=True)
    
    gender = determine_gender(message.from_user.first_name)

    # Random chance to switch gender
    switch_chance = 20 if gender == 'woman' else 40
    if random.randint(1, 100) <= switch_chance:
        gender = 'man' if gender == 'woman' else 'woman'

    # Select an emoji for the biba or breast
    is_biba = (gender == 'man')
    emoji = select_emoji(length, is_biba)

    # Send message based on final gender
    if gender == 'woman':
        await message.reply(f'{emoji} –£ {target} –≥—Ä—É–¥—å {length // 5} —Ä–∞–∑–º–µ—Ä–∞.')
    else:
        # replace with your message for men
        await message.reply(f"{emoji} –£ {target} –±–∏–±–∞ {length} —Å–º")


@rate_limit(10, "fun")
async def roll(message: types.Message):
    """–•–µ–¥–ª–µ—Ä, –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–∞–Ω–¥—ã /roll –∏–ª–∏ !roll

    –í –æ—Ç–≤–µ—Ç, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ

    –ü—Ä–∏–º–µ—Ä—ã:

        /roll
        /roll 10
        /roll 1-10
        /roll 10-1
        !roll
        !roll 10
        !roll 1-10
        !roll 10-1
    """
    # —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    command_parse = re.compile(r"(!roll|/roll) ?(-?\d*)?-?(\d+)?")
    parsed = command_parse.match(message.text)
    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–æ
    num = generate_num(parsed.group(2), parsed.group(3))
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ
    await message.reply(f"–í–∞—à–µ —á–∏—Å–ª–æ: <b>{num}</b>")


async def delete_hamster(message: types.Message, state: FSMContext):
    sticker_sets = [set_name for (set_name,) in db.select_all_sets()]
    if message.sticker.set_name in sticker_sets:
        await message.delete()

        async with state.proxy() as data:
            if not data.get("Sticker Flood"):
                data["Sticker Flood"] = 1
            else:
                data["Sticker Flood"] += 1
                if data["Sticker Flood"] >= 3:
                    try:
                        await message.chat.restrict(
                            user_id=message.from_user.id,
                            permissions=set_user_ro_permissions(),
                            until_date=datetime.datetime.now()
                                       + datetime.timedelta(minutes=int(10)),
                        )
                    except Exception as err:
                        pass
                    await message.answer(
                        f"{message.from_user.get_mention(as_html=True)} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 10 –º–∏–Ω "
                        f"–∑–∞ –ø–ª–æ—Ö–∏–µ —Å—Ç–∏–∫–µ—Ä—ã."
                    )

                    data["Sticker Flood"] = 0

                    # —è –æ–±–∏–¥–µ–ª—Å—è

                    return
        await message.answer(
            f"{message.from_user.get_mention(as_html=True)}! –©–∞ –∑–∞–±–∞–Ω—é —Å—É–∫–∞."
        )


def register_other_handlers(dp: Dispatcher):
    dp.register_message_handler(gay, Command("gay", prefixes="!/"))
    dp.register_message_handler(biba, Command("biba", prefixes="!/"))
    dp.register_message_handler(roll, Command("roll", prefixes="!/"))
    dp.register_message_handler(delete_hamster, content_types=types.ContentType.STICKER)
