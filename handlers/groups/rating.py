import asyncio
import random

from aiogram.dispatcher.filters import IsReplyFilter
from aiogram.types import Message, Chat
from async_lru import alru_cache

from filters import IsGroup
from loader import db, dp, bot
from utils.misc import rate_limit

from utils.misc.rating import caching_rating, get_rating

@dp.message_handler(
    IsGroup(),
    text='/reset_rating', user_id=362089194)
async def reset_rating_handler(m: Message):
    db.drop_table('RatingUsers')
    db.create_table_rating_users()
    await m.reply('–ì–æ—Ç–æ–≤–æ')


@rate_limit(limit=30, key='rating',
            text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ç–∞–∫ —á–∞—Å—Ç–æ –Ω–∞—á–∏—Å–ª—è—Ç—å —Ä–µ–π—Ç–∏–Ω–≥. (<i>–°–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è</i>")
@dp.message_handler(
    IsGroup(),
    IsReplyFilter(True),
    text=["+", "-"])
async def add_rating_handler(m: Message):
    helper_id = m.reply_to_message.from_user.id  # –∞–π–¥–∏ —Ö–µ–ª–ø–µ—Ä–∞
    user_id = m.from_user.id  # –∞–π–¥–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª + –∏–ª–∏ -
    message_id = m.reply_to_message.message_id

    if m.bot.id == helper_id or user_id == helper_id:
        return await m.delete()

    cached = caching_rating(helper_id, user_id, message_id)
    if not cached:
        return await m.delete()



    mention_reply = m.reply_to_message.from_user.get_mention(m.reply_to_message.from_user.first_name, True)
    mention_from = m.from_user.get_mention(m.from_user.first_name)
    
    if helper_id == 362089194 and m.text == '-':
        await m.answer_photo(photo='https://memepedia.ru/wp-content/uploads/2019/02/uno-meme-1.jpg', caption='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å. –í–∞—à —É–¥–∞—Ä –±—ã–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ—Ç–∏–≤ –≤–∞—Å')
        helper_id = m.from_user.id
        mention_reply = m.from_user.get_mention(m.from_user.first_name)
    ratings = {
        "+": 1,
        "-": -1
    }
    rating_user = get_rating(helper_id, ratings.get(m.text))

    if m.text == "+":
        text = f"{mention_from} <b>–ø–æ–≤—ã—Å–∏–ª —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b> {mention_reply} üò≥ \n" \
               f"<b>–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rating_user}</b>"
    else:
        text = f"{mention_from} <b>–ø–æ–Ω–∏–∑–∏–ª —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b> {mention_reply} üò≥ \n" \
               f"<b>–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rating_user}</b>"

    await m.answer(text)


@alru_cache(maxsize=10)
async def get_profile(user_id) -> Chat:
    await asyncio.sleep(0.1)
    chat = await bot.get_chat(user_id)
    return chat.full_name


@rate_limit(limit=30, key="top_helpers")
@dp.message_handler(commands=['top_helpers'])
async def get_top_helpers(m: Message):
    helpers = db.get_top_by_rating()
    emoji_for_top = [
        "ü¶ï", "üêô", "üêÆ", "üêª", "üêº", "üê∞", "ü¶ä", "ü¶Å", "üôà", "üê§", "üê∏"
    ]

    helpers = [helper for helper in helpers if helper[1] > 0]

    text = """
–¢–æ–ø –•–µ–ª–ø–µ—Ä–æ–≤:
{tops}
""".format(
        tops="\n".join([

            f"<b>{number}) {emoji_for_top[number-1]} {await get_profile(helper[0])} ( {helper[1]} )</b> " for number, helper in
            enumerate(helpers, 1)]
        )
    )
    await m.answer(text)
